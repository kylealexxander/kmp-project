package com.nseindia.mc.repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import com.nseindia.mc.controller.dto.NonSubmissionMbrDtlsDtoInterface;
import com.nseindia.mc.model.MTRDailyFile;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;

public interface MTRDailyFileRepository
    extends JpaRepository<MTRDailyFile, Long>, JpaSpecificationExecutor<MTRDailyFile> {

  String SQL_NON_SUBMISSION_MBR_DTLS =
      "select f.memberId as memberId, f.nonSubmissionCount as nonSubmissionCount,  " +
          "e.MEM_CD as memberCode, e.MEM_NAME as memberName,  " +
          ":year as year, :month as month  " +
          "from " +
          "(select b.MEMBER_ID as memberId,  " +
          ":businessDays - count(to_char(d.REPORTING_DATE, 'DD-MM-YYYY')) as nonSubmissionCount  " +
          "from  " +
          "(select a.MEMBER_ID from " +
          "TBL_MTR_MEMBER_LIST a " +
          "where a.ELIGIBLE_MEMBER_MTR_STATUS = 1 ) b " +
          "left join  " +
          "(select MEMBER_ID, REPORTING_DATE " +
          "from TBL_MTR_DAILY_FILE c  " +
          "where c.REPORTING_DATE >= TO_DATE(:startDate, 'DD-MM-YYYY')  " +
          "and c.DAILY_FILE_STATUS = 1 " +
          "and c.REPORTING_DATE <= TO_DATE(:endDate, 'DD-MM-YYYY')) d  " +
          "on b.MEMBER_ID = d.MEMBER_ID  " +
          "group by b.MEMBER_ID  " +
          ") f  " +
          "inner join TBL_MEMBER_MASTER e  " +
          "on f.memberId = e.MEM_ID"
      ;
  @Query(
      value = SQL_NON_SUBMISSION_MBR_DTLS,
      nativeQuery = true)
  List<NonSubmissionMbrDtlsDtoInterface> getNonSubmissionMbrDtls(
      int year, int month, int businessDays, String startDate, String endDate);

  String SQL_NON_SUBMISSION_MBR_DTLS_BY_MEMBER_CODE_OR_MEMBER_NAME =
      "select f.memberId as memberId, f.nonSubmissionCount as nonSubmissionCount,  " +
          "e.MEM_CD as memberCode, e.MEM_NAME as memberName,  " +
          ":year as year, :month as month  " +
          "from " +
          "(select b.MEMBER_ID as memberId,  " +
          ":businessDays - count(to_char(d.REPORTING_DATE, 'DD-MM-YYYY')) as nonSubmissionCount  " +
          "from  " +
          "(select a.MEMBER_ID from " +
          "TBL_MTR_MEMBER_LIST a " +
          "where a.ELIGIBLE_MEMBER_MTR_STATUS = 1 ) b " +
          "left join  " +
          "(select MEMBER_ID, REPORTING_DATE " +
          "from TBL_MTR_DAILY_FILE c  " +
          "where c.REPORTING_DATE >= TO_DATE(:startDate, 'DD-MM-YYYY')  " +
          "and c.DAILY_FILE_STATUS = 1 " +
          "and c.REPORTING_DATE <= TO_DATE(:endDate, 'DD-MM-YYYY')) d  " +
          "on b.MEMBER_ID = d.MEMBER_ID  " +
          "group by b.MEMBER_ID  " +
          ") f  " +
          "inner join TBL_MEMBER_MASTER e  " +
          "on f.memberId = e.MEM_ID  and (e.MEM_CD= :memberCode or e.MEM_NAME= :memberName ) "
      ;
  @Query(
      value = SQL_NON_SUBMISSION_MBR_DTLS_BY_MEMBER_CODE_OR_MEMBER_NAME,
      nativeQuery = true)
  List<NonSubmissionMbrDtlsDtoInterface> getNonSubmissionMbrDtlsByMemberCodeOrMemberName(
      int year, int month, int businessDays, String startDate, String endDate,
      String memberCode, String memberName);

  List<MTRDailyFile> findByDailyFileStatusTrueAndMember_MemIdAndReportingDateBetween(
      Long memberId, LocalDateTime reportDateStart, LocalDateTime reportDateEnd);

  List<MTRDailyFile> findByMember_MemIdAndReportingDateBetween(
    Long memberId, LocalDateTime reportDateStart, LocalDateTime reportDateEnd);

  List<MTRDailyFile> findByDailyFileStatusTrueAndReportingDateBetween(
      LocalDateTime reportDateStart, LocalDateTime reportDateEnd);

  List<MTRDailyFile> findByDailyFileStatusTrueAndReportingDate(
    LocalDateTime reportDate);

  List<MTRDailyFile> findByReportingDate(
    LocalDateTime reportDate);

  @Query(
      value =
          "SELECT * FROM TBL_MTR_DAILY_FILE T WHERE T.MEMBER_ID= ? AND TO_CHAR(T.REPORTING_DATE, 'DD-MM-YYYY') = ? " +
            "AND DAILY_FILE_STATUS = 1",
      nativeQuery = true)
  Optional<MTRDailyFile> findByMemberIdAndReportingDate(Long memberId, String reportDate);

  @Query(
    value =
      "SELECT * FROM TBL_MTR_DAILY_FILE T WHERE T.MEMBER_ID= ? AND TO_CHAR(T.REPORTING_DATE, 'DD-MM-YYYY') = ? ",
    nativeQuery = true)
  Optional<MTRDailyFile> findByMemberIdAndReportingDateIncludingAutoGeneratedFile(Long memberId, String reportDate);

  @Query(
    value =
      "select a.* from TBL_MTR_DAILY_FILE a INNER JOIN ( " +
      "select MEMBER_ID, MAX(REPORTING_DATE) as MaxDate from TBL_MTR_DAILY_FILE " +
      "where DAILY_FILE_STATUS=1 and MEMBER_ID IN (:memberIds) GROUP BY MEMBER_ID) b " +
      "ON a.MEMBER_ID = b.MEMBER_ID and a.REPORTING_DATE = b.MaxDate",
    nativeQuery = true)
  List<MTRDailyFile> findLastSuccessfulSubmissionByMemberIds(List<Long> memberIds);

  @Query(
    value =
      "SELECT * FROM TBL_MTR_DAILY_FILE T WHERE T.MEMBER_ID= :memberId AND TO_CHAR(T.REPORTING_DATE, 'DD-MM-YYYY') IN (:reportDates) ",
    nativeQuery = true)
  List<MTRDailyFile> findByMemberIdAndReportingDatesIncludingAutoGeneratedFiles(Long memberId, List<String> reportDates);

  @Query(
    value =
      "SELECT * FROM TBL_MTR_DAILY_FILE T WHERE T.MEMBER_ID= ? AND TO_CHAR(T.REPORTING_DATE, 'DD-MM-YYYY') = ? ",
    nativeQuery = true)
  Optional<MTRDailyFile> findByMemberIdAndReportingDateIncludingAutoGeneratedFiles(Long memberId, String reportDate);

  @Query(
      value =
          "SELECT * FROM TBL_MTR_DAILY_FILE T WHERE T.MEMBER_ID IN (:memberIds) AND TO_CHAR(T.REPORTING_DATE, 'DD-MM-YYYY') = :reportDate " +
            "AND DAILY_FILE_STATUS = 1",
      nativeQuery = true)
  List<MTRDailyFile> findByMemberIdsAndReportingDate(List<Long> memberIds, String reportDate);

  Optional<MTRDailyFile> findFirstByMember_MemIdAndDailyFileStatusOrderByReportingDateDesc(
      Long memberId, Boolean dailyFileStatus);

  Optional<MTRDailyFile>
  findTopByDailyFileStatusTrueAndMember_MemIdAndReportingDateBetweenOrderByDailyFileSubmissionDateDesc(
          long memberId, LocalDateTime atStartOfDay, LocalDateTime atDate);

  List<MTRDailyFile> findByDailyFileStatusTrueAndMember_MemIdAndDailyFileSubmissionDateBetween(
      Long memberId, LocalDateTime submissionFromDate, LocalDateTime submissionToDate);

  Optional<MTRDailyFile> findTopByDailyFileStatusTrueAndMember_MemIdOrderByReportingDateDesc(Long memberId);

  List<MTRDailyFile> findByDailyFileStatusTrueAndDailyFileSubmissionDateBetweenAndReportingDateBefore(
      LocalDateTime startTime, LocalDateTime endTime, LocalDateTime reportingDate);
}
